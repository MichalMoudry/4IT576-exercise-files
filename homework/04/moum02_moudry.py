#P≈ô√≠li≈° ≈ælu≈•ouƒçk√Ω k≈Ø≈à √∫pƒõl ƒè√°belsk√© √≥ - P≈ò√çLI≈† ≈ΩLU≈§OUƒåK√ù K≈Æ≈á √öPƒöL ƒé√ÅBELSK√â √ì
"""
Zad√°n√≠ dom√°c√≠ho √∫kolu, v nƒõm≈æ m√° student(ka) demonstrovat zvl√°dnut√≠
doposud probran√© l√°tky.
"""
import dbg; dbg.start_mod(1, __name__)
###########################################################################q

# Login autora/autorky programu zadan√Ω VELK√ùMI P√çSMENY
AUTHOR_ID = 'MOUM02'

# Jm√©no autora/autorky programu ve form√°tu P≈ò√çJMEN√ç K≈ôestn√≠
AUTHOR_NAME = 'MOUDR√ù Michal'

# Zdroje, z nich≈æ autor(ka) ƒçerpal(a) p≈ôi ≈ôe≈°en√≠ √∫kolu
SOURCES = """\
Prezentace
"""

# Probl√©my, kter√© se vyskytly p≈ôi zpracov√°n√≠ probran√© l√°tky a ≈ôe≈°en√≠ DU
PROBLEMS = """\
≈Ω√°dn√©
"""

# Pozn√°mky a p≈ôipom√≠nky k v√Ωkladu
COMMENTS = """\
≈Ω√°dn√©
"""


###########################################################################q
# Importy

# from robotcz import *
import random


###########################################################################q
# Abecednƒõ se≈ôazen√© pomocn√© funkce

def get_stone_weaknesses() -> str:
    """
    Funkce, kter√° vr√°t√≠ elementy, je≈æ poraz√≠ k√°men (pap√≠r, Spock), p≈ôiƒçem≈æ
    elementy jsou vr√°ceny jako string.
    """
    return "pS"

def get_scissor_weaknesses() -> str:
    """
    Funkce, kter√° vr√°t√≠ elementy, je≈æ poraz√≠ n≈Ø≈æky (k√°men, Spock), p≈ôiƒçem≈æ
    elementy jsou vr√°ceny jako string.
    """
    return "kS"

def get_paper_weaknesses() -> str:
    """
    Funkce, kter√° vr√°t√≠ elementy, je≈æ poraz√≠ k√°men (n≈Ø≈æky, tap√≠r), p≈ôiƒçem≈æ
    elementy jsou vr√°ceny jako string.
    """
    return "nt"

def get_tapir_weaknesses() -> str:
    """
    Funkce, kter√° vr√°t√≠ elementy, je≈æ poraz√≠ tap√≠ra (n≈Ø≈æky, k√°men), p≈ôiƒçem≈æ
    elementy jsou vr√°ceny jako string.
    """
    return "nk"

def get_spock_weaknesses() -> str:
    """
    Funkce, kter√° vr√°t√≠ elementy, je≈æ poraz√≠ Spocka (pap√≠r, tap√≠r), p≈ôiƒçem≈æ
    elementy jsou vr√°ceny jako string.
    """
    return "pt"

def handle_user_input(user_input: str) -> bool:
    """
    Funkce pro zpracov√°n√≠ u≈æivatelsk√©ho vstupu ve funkci roshambo().
    """
    res = True
    if "konec" in user_input or user_input == "":
        res = False
    return res

def get_appropriate_weakness(element: str) -> str:
    """
    Funkce, kter√° vr√°t√≠ spr√°vn√© slabosti pro urƒçen√Ω element.
    """
    if element == "k":
        return get_stone_weaknesses()
    elif element == "n":
        return get_scissor_weaknesses()
    elif element == "p":
        return get_paper_weaknesses()
    elif element == "t":
        return get_tapir_weaknesses()
    elif element == "S":
        return get_spock_weaknesses()

def get_random_number(big_bang: bool) -> int:
    """
    Funkce pro z√≠sk√°n√≠ pseudon√°hodn√©ho ƒç√≠sla podle parametr≈Ø hry.
    """
    if big_bang:
        return random.randint(1, 5)
    else:
        return random.randint(1, 3)

###########################################################################q
# Po≈æadovan√© funkce

def winner(player1:str, player2:str) -> int:
    """Vr√°t√≠ informaci o v√Ωherci ve h≈ôe k√°men-pap√≠r-n≈Ø≈æky, p≈ô√≠padnƒõ
    v roz≈°√≠≈ôen√© big-bangov√© verzi k√°men-n≈Ø≈æky-pap√≠r-tap√≠r-Spock.
    V argumentech oƒçek√°v√° prvn√≠ znak slova zad√°van√Ω jednotliv√Ωmi hr√°ƒçi.

    Vr√°t√≠ -1 je-li v√Ωhercem player1, 0 p≈ôi rem√≠ze a +1 vyhraje-li player2.
    ≈†patn√© zad√°n√≠ neoƒçek√°v√° - o korektn√≠ zad√°n√≠ se star√° volaj√≠c√≠ k√≥d.
    Parametr big_bang zad√°v√°, bude-li se jednat o standardn√≠ (implicitnƒõ)
    nebo roz≈°√≠≈ôenou (big_bang == True) verzi.
    """
    if player1 == player2:
        return 0
    if player2 in get_appropriate_weakness(player1):
        return 1
    else:
        return -1

def roshambo(big_bang=False) -> None:
    """Spust√≠ hru k√°men-pap√≠r-n≈Ø≈æky, p≈ô√≠padnƒõ jej√≠ big-bangovou verzi
    k√°men-pap√≠r-n≈Ø≈æky-tap√≠r-Spock mezi hr√°ƒçem a poƒç√≠taƒçem. Hra prob√≠h√°
    v textov√©m re≈æimu prost≈ôednictv√≠m standardn√≠ho vstupu a v√Ωstupu.
    Parametr big_bang zad√°v√°, bude-li se jednat o standardn√≠ (implicitnƒõ)
    nebo roz≈°√≠≈ôenou (big_bang == True) verzi.
    Hra se pr≈Øbƒõ≈ænƒõ pt√° hr√°ƒçe, kter√Ω zad√° prvn√≠ znak n√°zvu p≈ô√≠slu≈°n√© volby
    (k√°men - n≈Ø≈æky - pap√≠r - tap√≠r - Spock).
    Chce-li hru ukonƒçit, zad√° pr√°zdn√Ω string.
    Po ka≈æd√©m zad√°n√≠ zobraz√≠ odpovƒõƒè poƒç√≠taƒçe (generuje se n√°hodn√°),
    celkov√© sk√≥re a dotaz na dal≈°√≠ volbu.
    Zad√°-li hr√°ƒç ≈°patn√Ω znak (p≈ô√≠padnƒõ nezad√° nic), upozorn√≠ ho na to
    a zopakuje svoji ot√°zku.
    """
    is_game = True
    decision = 0
    while is_game:
        decision = get_random_number(big_bang)
        print("--------V√≠tejte ve h≈ôe k√°men, n≈Ø≈æky, pap√≠r--------")
        print("Va≈°e mo≈ænosti:\n- k√°men\n- n≈Ø≈æky\n- pap√≠r")
        if big_bang:
            print("- tap√≠r\n- Spock")
        print("- konec")
        print("--- rozhodnut√≠", decision)
        response = input("Zadejte akci: ")
        is_game = handle_user_input(response)

def my_function_4(costs: tuple, connections: tuple) -> int:
    """
    Funkce pro v√Ωpoƒçet √∫ƒçelov√© funkce v r√°mci p≈ôi≈ôazovac√≠ho probl√©mu.
    Tato funkce slou≈æ√≠ pro ovƒõ≈ôen√≠ v√Ωsledku, tedy zde nejde o nalezen√≠
    optim√°ln√≠ho ≈ôe≈°en√≠ p≈ôi≈ôazovac√≠ho probl√©mu.

    Pozn.: data se musej√≠ vkl√°dat po sloupc√≠ch a ne ≈ô√°dc√≠ch.

    ùë•ùëñùëó ‚àà {0,1}

    Promƒõnn√© ùë•ùëñùëó urƒçuj√≠c√≠, zda ùëñ‚àít√° jednotka z 
    prvn√≠ skupiny bude p≈ôi≈ôazena ùëó‚àít√© jednotce ze 
    skupiny druh√©.

    ùëñ = 1, 2, ‚Ä¶, ùëõ

    ùëó = 1, 2, ‚Ä¶, ùëõ

    ùëñ = ùëó

    n ‚Ä¶ poƒçet jednotek ve skupin√°ch
    """
    result = 0
    for connection in enumerate(connections):
        prefrence = 0
        for cost in enumerate(costs[connection[0]]):
            prefrence += cost[1] * connection[1][cost[0]]
        result += prefrence
    return result

###########################################################################q
# Testy

def test_winner() -> None:
    """Provƒõrka definice funkce winner()."""
    roshambo.allowed = 'knp'
    expected = 0, -1, +1,   +1, 0, -1,   -1, +1, 0
    for i, (u, c) in enumerate((('k', 'k'), ('k', 'n'), ('k', 'p'),
                                ('n', 'k'), ('n', 'n'), ('n', 'p'),
                                ('p', 'k'), ('p', 'n'), ('p', 'p'))):
        w = winner(u, c)
        print(f'{u} x {c} = {w:+} - '
              f'{"SPR√ÅVNƒö" if w==expected[i] else "=CHYBA="}')


def test_roshambo() -> None:
    """Provƒõrka definice funkce roshambo()."""
    import builtins as b
    b_input = b.input
    b.input = dbg.input
    dbg.INPUTS = ('k', 'k', 'k', 'n', 'n', 'n', 'n', 'p', 'p', 'p', '')
    #              0    1    2    0    1    1    2    2    0    1
    expected   = ( 0,  -1,  +1,  +1,   0,   0,  -1,   0,  -1,  +1, None)
    import random
    dbg.TST = 1
    random.seed(43)
    dbg.TST = 1
    roshambo()
    b.input = b_input
    dbg.TST = 0


def test_my_function_4() -> None:
    """
    Provƒõrka definice funkce my_function_4().

    Pozn.: oƒçek√°v√°n√° hodnota funkce je 34, proto≈æe jsem pou≈æil data
    z dom√°c√≠ho √∫kolu, tedy v√≠m, ≈æe v√Ωsledek je spr√°vnƒõ.
    """
    # Test ≈°patn√Ωch dat
    result = my_function_4(
        ((3, 6, 1, 0, 0), (6, 3, 1, 0, 0), (0, 1, 1, 7, 1),
        (1, 0, 7, 1, 1), (0, 0, 0, 2, 8)),

        ((0, 1, 0, 0, 0), (1, 0, 0, 0, 0), (0, 0, 0, 1, 0),
        (0, 0, 1, 0, 0))
    )
    print(f"V√Ωsledek √∫ƒçelov√© funkce: {result} "
    + f'{"SPR√ÅVNƒö" if result==34 else "=CHYBA="} (oƒçek√°v√°n√° hodnota 34)')
    # Test spr√°vn√Ωch dat
    result = my_function_4(
        ((3, 6, 1, 0, 0), (6, 3, 1, 0, 0), (0, 1, 1, 7, 1),
        (1, 0, 7, 1, 1), (0, 0, 0, 2, 8)),

        ((0, 1, 0, 0, 0), (1, 0, 0, 0, 0), (0, 0, 0, 1, 0),
        (0, 0, 1, 0, 0), (0, 0, 0, 0, 1))
    )
    print(f"V√Ωsledek √∫ƒçelov√© funkce: {result} "
    + f'{"SPR√ÅVNƒö" if result==34 else "=CHYBA="} (oƒçek√°v√°n√° hodnota 34)')


###########################################################################q
dbg.stop_mod(1, __name__)
